name: Deploy Spring Boot API to EC2 (Ubuntu)  # Nombre del workflow

on:
  push:                                 # Workflow activa cuando se hace push.
    branches:
      - main                            # Solo se ejecuta si push en rama main

jobs:
  build-and-deploy:                     # Define trabajo llamado buildanddeploy
    runs-on: ubuntu-latest              # El trabajo se ejecuta en Ubuntu

    steps:
      # 1️⃣ Descargar el código fuente del repositorio
      - name: Checkout source code       # Nombre del paso.
        uses: actions/checkout@v4        # Clonar el repositorio (versión actualizada).

      # 2️⃣ Configurar JDK 21 (Java Development Kit)
      - name: Set up JDK 21             # Nombre del paso.
        uses: actions/setup-java@v4     # Configurar el entorno Java (versión actualizada).
        with:
          java-version: '21'            # Especifica la versión de Java (21).
          distribution: 'temurin'       # Utiliza dist OpenJDK llamada Temurin.

      # 3️⃣ Configurar permisos para Maven wrapper
      - name: Make Maven wrapper executable
        run: chmod +x mvnw              # Hacer ejecutable el wrapper de Maven.

      # 4️⃣ Construir la aplicación usando Maven
      - name: Build with Maven          # Nombre del paso.
        run: ./mvnw clean package -DskipTests  # Construir proyecto, generando .war.

      # 5️⃣ Copiar el archivo .war a la instancia EC2
      - name: Copy .war to EC2          # Nombre del paso.
        uses: appleboy/scp-action@v0.1.7  # Copiar archivos a servidor remoto (versión actualizada)
        with:
          host: ${{ secrets.EC2_HOST }}    # Dirección IP de la instancia EC2 
          username: ${{ secrets.EC2_USERNAME }}  # Nombre usuario EC2
          key: ${{ secrets.EC2_PRIVATE_KEY }}    # Clave privada SSH 
          source: target/Api-0.0.1-SNAPSHOT.war  # Ruta del archivo .war (nombre corregido)
          target: /home/ubuntu/                   # Carpeta destino en EC2
          strip_components: 1                     # Elimina directorios 

      # 6️⃣ Mover el archivo .war a la carpeta webapps de Tomcat y configurar permisos
      - name: Deploy to Tomcat and restart service  
        uses: appleboy/ssh-action@v1.0.3        # Acción ssh-action (versión actualizada)
        with:
          host: ${{ secrets.EC2_HOST }}         # Dirección IP de EC2
          username: ${{ secrets.EC2_USERNAME }} # Nombre de usuario de EC2
          key: ${{ secrets.EC2_PRIVATE_KEY }}   # Clave privada SSH 
          script: |
            # Parar el servicio Tomcat antes del despliegue
            sudo systemctl stop tomcat10
            
            # Limpiar aplicaciones anteriores en webapps
            sudo rm -rf /var/lib/tomcat10/webapps/Api*
            
            # Mover el archivo .war a la carpeta de despliegue de Tomcat.
            sudo mv /home/ubuntu/Api-0.0.1-SNAPSHOT.war /var/lib/tomcat10/webapps/Api.war  
            
            # Cambiar el propietario del archivo a "tomcat" para que el servicio tenga acceso.
            sudo chown tomcat:tomcat /var/lib/tomcat10/webapps/Api.war  
            
            # Cambiar los permisos del archivo para que sea legible y ejecutable.
            sudo chmod 644 /var/lib/tomcat10/webapps/Api.war 
            
            # Asegurar que la carpeta webapps tenga los permisos correctos
            sudo chown -R tomcat:tomcat /var/lib/tomcat10/webapps/
            
            # Reiniciar el servicio Tomcat para cargar el nuevo archivo .war.
            sudo systemctl start tomcat10
            
            # Verificar que el servicio esté ejecutándose
            sudo systemctl status tomcat10 --no-pager
            
            # Verificar que ambos puertos estén activos
            sudo netstat -tlnp | grep -E ":8080|:8443"
 